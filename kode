#!/usr/bin/env bash

program_name=$(basename "$0")

# Adds support so that the 'kode' checkout dir is where the config is stored and read from
SCRIPT_ROOT_DIR="$(dirname "$(readlink -f "$0")")"

#colors and variables
R='\033[1;31m'
G='\033[1;32m'
W='\033[1;37m'
OFF='\033[0m'
DATE="$(date '+%a %d %b %y  %R:%S')"
FORMAT="%-16s %-30s %s\n"
CODE_TEMPLATE="$SCRIPT_ROOT_DIR/.kode"
CONFIG_FILE="$CODE_TEMPLATE/kodeconfig"
DEFAULT_CONFIG_FILE="$CONFIG_FILE.temp"

DEBUG=false # When enabled, prints the file, rather than opening in editor


#### FUNCTIONS

function help_function() {
    printf "Usage : ${W}$program_name${OFF}  [-dhvt] [-a name] [file...]

    -a\t Set Author Name (e.g. '$program_name -a \"Author Name\"')
    -d\t Display config information (for debugging)
    -h\t Display this help message
    -t\t Toggle code insertion mode
    -v\t Display version info\n"
    exit
}


function source_config() {
    # Generates a default config from the temp file, 
    # if not present, and loads kodeconfig
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cp "$DEFAULT_CONFIG_FILE" "$CONFIG_FILE"
    fi

    # shellcheck source=./.kode/kodeconfig
    source "$CONFIG_FILE"
}


function display_config() {
    local format="%-25s %s\n"
    source_config   # ensure the config exists

    printf "$format" "env:" "$(which env)"
    printf "$format" "CODE_TEMPLATE:" "$CODE_TEMPLATE"
    printf "$format" "CONFIG_FILE:" "$CONFIG_FILE"
    printf "$format" "DEFAULT_CONFIG_FILE:" "$DEFAULT_CONFIG_FILE"
    printf "\n\n$CONFIG_FILE:\n\n"
    cat "$CONFIG_FILE"
    exit 0
}


function set_author() {
    source_config   # ensure the config exists
    sed -i "0,/^KODE_AUTHOR.*/{s//KODE_AUTHOR=\"$1\"/}" "$CONFIG_FILE"
    printf "Author name set to \"$1\".\n"
    exit 0
}


function header_template() {
    # Pass open and closing comments character: $1
    printf "$1*************************************************#\n"

    printf "$FORMAT" "#" "" "  #"
    printf "$FORMAT" "#  Project title :" "$filename" "#"
    printf "$FORMAT" "#  Author        :" "$KODE_AUTHOR" "#"
    printf "$FORMAT" "#  Date          :" "$DATE" "#"
    printf "$FORMAT" "#  Last modified :" "$DATE" "#"
    printf "$FORMAT" "#  Notes         :" "" "#"
    printf "$FORMAT" "#  Description   :" "" "#"
    printf "$FORMAT" "#" "" "  #"

    printf "#*************************************************$1\n\n"
}


function insert_code_template() {
    # Generates code template by matching pattern: `.extension` to `./.kode/extension.temp`
    extension="${filename##*.}" # Strip everything before the last '.' in the filename

    if [[ "$extension" ]]; then
        template_file="$CODE_TEMPLATE/$extension.temp"
        if [[ -f "$template_file" ]]; then
            cat "$template_file" >> "$filename"

        else
            printf "No template exists for extension: $extension\n"

        fi
    fi
}


function check_if_scripting_language() {
    case "$filename" in
        *.pl ) scripting_language="perl";;
        *.py ) scripting_language="python3";;
        *.rb ) scripting_language="ruby";;
        *.sh ) scripting_language="bash";;
    esac
}


function generate_header() {
    COMMENT_CHARACTER="/"   # Default to '/'

    check_if_scripting_language
    if [[ "$scripting_language" ]]; then
        printf "#!$(which env) $scripting_language\n\n" >> "$filename"    # Add env header
        COMMENT_CHARACTER="#"   # Set for scripting languages
    fi

    header_template "$COMMENT_CHARACTER" >> "$filename"

    if [[ "$INSERT_CODE" == true && -z "$scripting_language" ]]; then 
        insert_code_template
    fi
}


function update_last_modified() {
    replace_with=$(printf "$FORMAT" "#  Last modified :" "${DATE}" '#')
    sed -i "0,/^#  Last modified.*/{s//${replace_with}/}" "$1"  # update first occurrence of "Last modified"
}


function toggle_config_state() {
    # Toggles a boolean kodeconfig var
    if [[ -z "$1" ]]; then
            printf "Expected kodeconfig variable"
            exit 1;

    else
        kodeconfig_var="$1"

    fi

    current_toggle_state="$(grep "$kodeconfig_var" "$CONFIG_FILE" | cut -d '=' -f 2)"

    if [[ "$current_toggle_state" == true ]]; then
        sed -i "s/$kodeconfig_var=true/$kodeconfig_var=false/" "$CONFIG_FILE"
        printf "$kodeconfig_var ${R}disabled.${OFF}\n"

    elif [[ "$current_toggle_state" == false  ]]; then
        sed -i "s/$kodeconfig_var=false/$kodeconfig_var=true/" "$CONFIG_FILE"
        printf  "$kodeconfig_var ${G}enabled.${OFF}\n"

    elif [[ "$current_toggle_state" ]]; then
        printf "Key \"$kodeconfig_var\" has value \"$current_toggle_state\" in \"$CONFIG_FILE\". Unable to toggle.\n"

    else
        printf "Key \"$kodeconfig_var\" not found in \"$CONFIG_FILE\"\n"
        exit 1

    fi
}


function toggle_code_insertion() {
    source_config   # ensure the config exists
    toggle_config_state "INSERT_CODE"
    exit 0
}


function determine_md5_program() {
    # Added support for OSX default (or other OS's with md5 as default)
    if [[ $(type -p md5sum ) ]]; then
        printf "md5sum"

    elif [[ $(type -p md5 ) ]]; then
        printf "md5"

    else
        printf "Please install 'md5sum' or 'md5' to use this program\n"
        exit 1

    fi
}


function generate_md5_checksum() {
    printf "$($md5_command "$1" | cut -d " " -f 1)"
}


function generate_new_file() {
    generate_header "$filename"
    chmod u+x "$filename"
    new=true
}


function kodify() {
    # Handles generating a new file with the appropriate headers
    # and template (where supported)

    new=false
    if [[ ! -f "$filename" ]]; then 
        generate_new_file 
    fi

    md5_before="$(generate_md5_checksum "$filename")"
    if [[ "$DEBUG" == true ]]; then
        cat "$filename"

    else
        "$EDITOR" "$filename"

    fi
    md5_after="$(generate_md5_checksum "$filename")"
}


function post_processing() {
    if [[ "$new" = true  && "$md5_before" == "$md5_after" ]]; then
        # Delete the file if it's only the default template
        rm -f "$filename"

    elif [[ "$md5_before" != "$md5_after" ]]; then
        update_last_modified "$filename"

    fi
}


function version() {
    cat "$SCRIPT_ROOT_DIR/.version"
    exit 0
}


#### Parse Args and Setup

md5_command=$(determine_md5_program)

while getopts ":dhvta:" flag; do
    case "${flag}" in
        a) set_author "${OPTARG}";;
        d) display_config;;
        h) help_function;;
        t) toggle_code_insertion;;
        v) version;;
        :) printf "No input"; help_function;;
        *) printf "$program_name: Invalid option -- '${OPTARG}'\n"; help_function;;
    esac
done

if [[ -z "$1" ]]; then 
    printf "$program_name: No file provided\n"
    help_function

else 
    filename="$1"
    source_config

fi


#### RUN
kodify
post_processing

exit 0
